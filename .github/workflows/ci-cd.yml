name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  PHP_VERSION: '8.2'

jobs:
  test:
    runs-on: ubuntu-latest

    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: root
          MYSQL_DATABASE: payroll_test
          MYSQL_USER: test_user
          MYSQL_PASSWORD: test_pass
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: ${{ env.PHP_VERSION }}
        extensions: pdo, pdo_mysql, mbstring, exif, pcntl, bcmath, gd, zip
        tools: composer:v2, phpunit

    - name: Cache Composer dependencies
      uses: actions/cache@v3
      with:
        path: backend/vendor
        key: ${{ runner.os }}-php-${{ hashFiles('backend/composer.lock') }}
        restore-keys: ${{ runner.os }}-php-

    - name: Install PHP dependencies
      run: |
        cd backend
        composer install --no-progress --prefer-dist --optimize-autoloader

    - name: Copy environment file
      run: |
        cd backend
        cp .env.example .env
        sed -i 's/DB_HOST=.*/DB_HOST=127.0.0.1/' .env
        sed -i 's/DB_DATABASE=.*/DB_DATABASE=payroll_test/' .env
        sed -i 's/DB_USERNAME=.*/DB_USERNAME=test_user/' .env
        sed -i 's/DB_PASSWORD=.*/DB_PASSWORD=test_pass/' .env

    - name: Setup database
      run: |
        cd backend
        mysql -h 127.0.0.1 -u test_user -ptest_pass payroll_test < schema.sql
        mysql -h 127.0.0.1 -u test_user -ptest_pass payroll_test < seeds/seed.sql

    - name: Run PHPStan (Static Analysis)
      run: |
        cd backend
        composer require --dev phpstan/phpstan
        vendor/bin/phpstan analyse src --level=5

    - name: Run PHP CodeSniffer
      run: |
        cd backend
        composer require --dev squizlabs/php_codesniffer
        vendor/bin/phpcs src --standard=PSR12 --ignore=vendor/

    - name: Run tests
      run: |
        cd backend
        # Create basic test structure if it doesn't exist
        mkdir -p tests
        echo "<?php
        use PHPUnit\Framework\TestCase;
        use App\Services\AuthService;

        class AuthServiceTest extends TestCase
        {
            public function testPasswordHashing()
            {
                \$authService = new AuthService(null);
                \$hash = \$authService->hashPassword('testpassword');
                \$this->assertTrue(password_verify('testpassword', \$hash));
            }
        }" > tests/AuthServiceTest.php

        # Run PHPUnit
        vendor/bin/phpunit tests/ --bootstrap vendor/autoload.php

  security-scan:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  build-and-deploy:
    needs: [test, security-scan]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Build and push backend Docker image
      uses: docker/build-push-action@v5
      with:
        context: ./backend
        file: ./backend/Dockerfile
        push: true
        tags: |
          ${{ secrets.DOCKER_USERNAME }}/payzone-backend:latest
          ${{ secrets.DOCKER_USERNAME }}/payzone-backend:${{ github.sha }}

    - name: Build and push frontend Docker image
      uses: docker/build-push-action@v5
      with:
        context: ./frontend
        file: ./frontend/Dockerfile
        push: true
        tags: |
          ${{ secrets.DOCKER_USERNAME }}/payzone-frontend:latest
          ${{ secrets.DOCKER_USERNAME }}/payzone-frontend:${{ github.sha }}

    - name: Deploy to production
      run: |
        echo "Deployment would happen here"
        echo "Using Docker images: ${{ secrets.DOCKER_USERNAME }}/payzone-backend:${{ github.sha }}"
        echo "Using Docker images: ${{ secrets.DOCKER_USERNAME }}/payzone-frontend:${{ github.sha }}"

  deploy-staging:
    needs: [test, security-scan]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/develop'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Deploy to staging
      run: |
        echo "Deploying to staging environment"
        echo "Staging deployment completed"